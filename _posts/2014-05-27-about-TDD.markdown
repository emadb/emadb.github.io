---
layout: post
title: "About TDD (IMHO)"
date: 2014-05-26
comments: true
categories:
---

In these days everybody talks about TDD due to the [post](http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html) of DHH titled TDD is Dead and the various [hangouts](https://www.youtube.com/watch?v=z9quxZsLcfo) with [Fowler](http://martinfowler.com/) and [Beck](https://twitter.com/KentBeck).
I’m a proponent of TDD, I teach TDD and I practice it for 5 years even if I’m not a fanatic and I don’t do TDD all the time. But I like it, and I gain value from applying TDD in my projects.
Why?

* With TDD I can broke up my story in small tasks and every time I add a test and it became green I’m moving towards the final implementation. One test is equivalent to a small functionality. 

* TDD force me to deeply think at what the customer wants. If I’m not sure what the customer needs I can’t even write a test so I’m forced to ask more informations that I will use to write the tests and then the implementation.

* Using TDD I’m indirectly creating a test suite that I can run every time I need feedback on the status of my codebase.

* TDD let you design your classes in a simpler way. Since the tests are naturally simple, the tested code is by default simple too.

* TDD let me think at my code from the user perspective, this means that the first things that I do is to design the interface of my method: I define the name, the return type and the parameters without caring at the implementation. This results in a cleaner interface.

* TDD let you do extreme refactoring without worries about breaking the functionalities. Can you really refactor your code without the tests?


By looking at the list above you can see that TDD is more about *design* that about testing, the tests are a welcome side effects and TDD really helps you in design orthogonal classes that respect the OOP principles.

So why DHH said that TDD is dead?
There are cases in which TDD doesn’t fit and big frameworks like Rails is one of those situations.
Doing TDD on a Ruby on Rails application (or ASP.NET MVC) is useless, the design of the controllers is already defined by the framework itself and TDD doesn’t add anything, so in this case you can add your tests later.
Other cases in which TDD doesn’t work, at least for me, is when I have to learn how to use a new library or a new programming language. In these cases using TDD to experiment make the learning process more difficult and complicated so I prefer to try the new stuff without other ballasts that slow me down.


So, I will continue to do TDD when possible since until now I get lot of value from this practice and the 6 points above are for me very valuable.